server:
  secret-uuid: ${RANDOM_UUID}
  port: 8081
  servlet:
    session:
      timeout: 5259600
      cookie:
        max-age: 5259600
        name: JSESSIONID

spring:
  servlet:
    multipart:
      max-request-size: 128MB
      max-file-size: 128MB
  session:
    timeout: 5259600

  mvc:
    async:
      request-timeout: 120s

  datasource:
    hikari:
      maximum-pool-size: 25
      max-lifetime: 60000
      validationTimeout: 3000
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:localDB}
    password: ${DB_PASSWORD:localPS}
    url: ${DB_URL:jdbc:postgresql://host.docker.internal:5432/local}

  kafka:
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    consumer:
      group-id: spring-boot-node

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: false
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        jdbc:
          batch_size: 30
        order_updates: true
        order_inserts: true
        generate_statistics: false
        format_sql: false

  main:
    allow-circular-references: true

management:
  emergency-menu-url: /emergency/${server.secret-uuid}
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: ${management.emergency-menu-url}/actuator
      shutdown-path: ${management.endpoints.web.base-path}/shutdown
  endpoint:
    shutdown:
      enabled: true

aws:
  aws_access_key_id: ${aws_access_key_id}
  aws_secret_access_key: ${aws_secret_access_key}

vapid:
  public:
    key: ${VAPID_PUBLIC_KEY}
  private:
    key: ${VAPID_PRIVATE_KEY}

telegram:
  bot_token: ${bot_token}
  customer_bot_token: ${customer_bot_token}

ai:
  url: ${AI_URL}

secret:
  emergency_password: ${EMERGENCY_PASSWORD}

site:
  domain: ${SITE_MAIN_DOMAIN}

topic:
  create-chat-topic: "create-chat"